@IsTest
public class CommunityControllerTest {
    @TestSetup
    static void dataSetUp(){
        
        List<Product2> products = new List<Product2>();
        for(Integer i = 0; i < 10; i++){
            Product2 product = new Product2(
                Name = 'Test Product' + i,
                Model__c = 'Suv',
                Brand__c = 'Toyota',
                Color__c = 'Red',
                Price__c = 300000,
                DisplayUrl = 'www.salesforce.com',
                IsActive = true);
                products.add(product);
            Product2 noActiveProduct = new Product2(
                Name = 'Test Product' + (4+i),
                Model__c = 'Car',
                Brand__c = 'MG',
                Color__c = 'Blue',
                Price__c = 280000,
                DisplayUrl = 'www.salesforce.com',
                IsActive = false);
                products.add(noActiveProduct);
        }
        insert products;

        //////////////////////////////////////////

        List<Lead> leads = new List<Lead>();
        for(Integer i = 0; i < 10; i++){
            Lead lead = new Lead(
                FirstName = 'Test' + i,
                LastName = 'Lastname',
                Email = ('Leadtest' + i + '@test.com'),
                Company = 'Testing',
                City = 'Merida',
                State = 'Yucatan',
                LeadSource = 'WebToLead');
                leads.add(lead);
        }
        insert leads;

        Profile profile = [SELECT Id FROM Profile WHERE Name='Community User'];
        
        List<User> users = new List<User>();
        for(Integer i = 0; i < 3; i++){
            User adminUser = new User(
                Alias = 'aUser', 
                Email='adminuser@test1.com',
                EmailEncodingKey='UTF-8', 
                LastName='Admin', 
                LanguageLocaleKey='en_US',
                LocaleSidKey='en_US', 
                ProfileId = profile.Id,
                TimeZoneSidKey='America/Los_Angeles', 
                UserName='auser012522' + i + '@test.com');
                users.add(adminUser);
        }
        insert users;
    }

    
    @isTest
    public static void getActiveProductsTest(){
        Test.startTest();
        List<Product2> getActiveProducts = CommunityController.getActiveProducts();
        Test.stopTest();
        System.assertEquals(10, getActiveProducts.size(), 'There are not 10 products displaying');
    }

    @isTest
    public static void getAllCarsTest(){
        Test.startTest();
        List<Product2> getAllCars = CommunityController.getAllCars();
        Test.stopTest();
        System.assertEquals(20, getAllCars.size(), 'There are not 20 Cars');
    }

    public static void getCarsTest(){
        Test.startTest();
        List<Product2> getCars = CommunityController.getCars();
        Test.stopTest();
        System.assertEquals(10, getCars.size(), 'There are not 10 products displaying');
    }

    @isTest
    public static void getAvailableCarsTest(){
        Test.startTest();
        List<Product2> getAvailableCars = CommunityController.getAvailableCars('Suv', 'Toyota', 'Red');
        Test.stopTest();
        System.assertEquals(10, getAvailableCars.size(), 'There are not 10 Available Cars');
    }

    @isTest
    public static void getWebToLeadLeadsTest(){
        Test.startTest();
        List<Lead> getWebToLeadLeads = CommunityController.getWebToLeadLeads();
        Test.stopTest();
        System.assertEquals(10, getWebToLeadLeads.size(), 'There are not 10 Leads with LeadSource called WebToLeadLeads');
    }

    @isTest
    public static void leadToUptTest(){
        Lead leadToTest = [SELECT Id, FirstName, LastName, Email, Company, City, State FROM Lead LIMIT 1];
        Id leadId = leadToTest.Id;
        String fname = 'Hola';
        Test.startTest();
        CommunityController.leadToUpt(leadToTest.Id,fname,leadToTest.LastName,leadToTest.Email,leadToTest.Company,leadToTest.City,leadToTest.State);
        Lead finalLead = [SELECT Id, FirstName, LastName, Email, Company, City, State FROM Lead WHERE Id = :leadId];
        Test.stopTest();
        System.assertEquals('Hola', finalLead.FirstName, 'The Firstname is not Hola');
    }

    @isTest
    public static void assignUserTest(){
        Lead leadToTest = [SELECT Id, Name, OwnerId FROM Lead LIMIT 1];
        Id userId = [SELECT Id, Name, UserName FROM User WHERE UserName = 'auser0125222@test.com'].Id;
        Id leadId = leadToTest.Id;
        Test.startTest();
        CommunityController.assignUser(leadId,userId);
        Lead finalLead = [SELECT Id, Name, OwnerId FROM Lead WHERE Id = :leadId];
        Test.stopTest();
        System.assertEquals(userId, finalLead.OwnerId, 'The Lead Owner does not changed');
    }

    //Debe estar el LeadToUptTest//

    @isTest
    public static void getAdminUsersTest(){
        List<User> users = [SELECT Id, Name, Email FROM User WHERE Email = 'adminuser@test1.com'];
        PermissionSet permissionSet = [SELECT Id FROM PermissionSet WHERE Name = 'Admin_User'];
        List<PermissionSetAssignment> permissionSetList = new List<PermissionSetAssignment>();

        for(Integer i = 0; i < users.size(); i++){
            PermissionSetAssignment permissionSetAssignment = new PermissionSetAssignment();
            permissionSetAssignment.AssigneeId = users[i].Id;
            permissionSetAssignment.PermissionSetId = permissionSet.Id;
            permissionSetList.add(permissionSetAssignment);
        }
        insert permissionSetList;
        Test.startTest();
        List<PermissionSetAssignment> getAdminUsers = CommunityController.getAdminUsers();
        Test.stopTest();
        System.assertEquals(5, getAdminUsers.size(), 'There are not 5 Users with Admin_user permissionSet');
    }

    @isTest
    public static void isAdminTest(){
        Profile profile = [SELECT Id FROM Profile WHERE Name='Community User'];

        User adminUser = new User(Alias = 'aUser', Email='adminuser@test.com',
                          EmailEncodingKey='UTF-8', LastName='Admin', LanguageLocaleKey='en_US',
                          LocaleSidKey='en_US', ProfileId = profile.Id,
                          TimeZoneSidKey='America/Los_Angeles', UserName='auser012522@test.com');
        insert adminUser;

        User clientUser = new User(Alias = 'cUser', Email='clientuser@test.com',
                          EmailEncodingKey='UTF-8', LastName='Client', LanguageLocaleKey='en_US',
                          LocaleSidKey='en_US', ProfileId = profile.Id,
                          TimeZoneSidKey='America/Los_Angeles',     UserName='cUser012522@test.com');
        insert clientUser;
        
        PermissionSet permissionSet = [SELECT Id FROM PermissionSet WHERE Name = 'Admin_User'];
       
        PermissionSetAssignment permissionSetAssignment = new PermissionSetAssignment();
        permissionSetAssignment.AssigneeId = adminUser.Id;
        permissionSetAssignment.PermissionSetId = permissionSet.Id;
        insert permissionSetAssignment;

        Test.startTest();
        User admin = [SELECT Id, Name, Email FROM User WHERE Email = 'adminuser@test.com'];
        Boolean adminPositive = CommunityController.isAdmin(admin.Id);
        User client = [SELECT Id, Name, Email FROM User WHERE Email = 'clientuser@test.com'];
        Boolean adminNegative = CommunityController.isAdmin(client.Id);
        Test.stopTest();
        System.assertEquals(true, adminPositive, 'It is a client user');
        System.assertEquals(False, adminNegative, 'It is an admin user');
    }


    @isTest
    public static void uploadFileTest(){
        String base64 = '';
        Test.startTest();
        Id recordId = [SELECT Id, IsActive FROM Product2 WHERE IsActive = true LIMIT 1].Id;
        String cdlId = CommunityController.uploadFile(base64, 'download', recordId);
        Test.stopTest();
        System.assert(cdlId != null, 'ID null');
    }

    @isTest
    public static void simulatorTest(){
        List<CommunityController.SimulatorProperties> totalRows = CommunityController.simulator(289900, 93000, '24');
        System.assertEquals(25, totalRows.size(), 'The table does not have 0-24 rows, must be 25 rows');
    }
}
